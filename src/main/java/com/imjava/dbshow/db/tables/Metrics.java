/*
 * This file is generated by jOOQ.
 */
package com.imjava.dbshow.db.tables;


import com.imjava.dbshow.db.Dbshow;
import com.imjava.dbshow.db.Indexes;
import com.imjava.dbshow.db.Keys;
import com.imjava.dbshow.db.tables.records.MetricsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Metrics extends TableImpl<MetricsRecord> {

    private static final long serialVersionUID = 471597530;

    /**
     * The reference instance of <code>dbshow.metrics</code>
     */
    public static final Metrics METRICS = new Metrics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetricsRecord> getRecordType() {
        return MetricsRecord.class;
    }

    /**
     * The column <code>dbshow.metrics.metric_type</code>.
     */
    public final TableField<MetricsRecord, String> METRIC_TYPE = createField(DSL.name("metric_type"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>dbshow.metrics.id</code>.
     */
    public final TableField<MetricsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * Create a <code>dbshow.metrics</code> table reference
     */
    public Metrics() {
        this(DSL.name("metrics"), null);
    }

    /**
     * Create an aliased <code>dbshow.metrics</code> table reference
     */
    public Metrics(String alias) {
        this(DSL.name(alias), METRICS);
    }

    /**
     * Create an aliased <code>dbshow.metrics</code> table reference
     */
    public Metrics(Name alias) {
        this(alias, METRICS);
    }

    private Metrics(Name alias, Table<MetricsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Metrics(Name alias, Table<MetricsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Metrics(Table<O> child, ForeignKey<O, MetricsRecord> key) {
        super(child, key, METRICS);
    }

    @Override
    public Schema getSchema() {
        return Dbshow.DBSHOW;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METRICS_PRIMARY);
    }

    @Override
    public Identity<MetricsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_METRICS;
    }

    @Override
    public UniqueKey<MetricsRecord> getPrimaryKey() {
        return Keys.KEY_METRICS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MetricsRecord>> getKeys() {
        return Arrays.<UniqueKey<MetricsRecord>>asList(Keys.KEY_METRICS_PRIMARY);
    }

    @Override
    public Metrics as(String alias) {
        return new Metrics(DSL.name(alias), this);
    }

    @Override
    public Metrics as(Name alias) {
        return new Metrics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Metrics rename(String name) {
        return new Metrics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Metrics rename(Name name) {
        return new Metrics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
